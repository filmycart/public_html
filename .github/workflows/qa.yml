# name: QA
# on:
#   push:
#     branches: [ "qa" ]
#     #paths: ["home/kz8vi9h6efqu/public_html/qa/**"]
# permissions:
#   contents: write
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - name: Copy files
#           run: |
#             git config --global user.name "filmycart"
#             git config --global user.email "filmycartin@gmail.com"
#             rsync -r --exclude=.git --exclude=.github
#       - name: Copy .env
#           run: php -r "file_exists('.env') || copy('.env.example', '.env');"
#       - name: Directory Permission
#           run: chmod -R 777 storage  
# step-deploy-prod:
#   stage: deploy
#   only:
#     - production
#   script:
#     - git checkout production
#     - git pull
#   environment: production
#   when: manual

  # jobs:
  #   script:
  #     - git pull qa
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Copy .env
  #       run: php -r "file_exists('.env') || copy('.env.example', '.env');"
  #     - name: Directory Permission
  #       run: chmod -R 777 storage
  # copy:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout qa
  #       uses: actions/checkout@v4
  #       with:
  #         ref: qa
  #     - name: Copy files
  #         run: |
  #           git config --global user.name "filmycart"
  #           git config --global user.email "filmycartin@gmail.com"
  #           rsync -r --exclude=.git --exclude=.github
  #           git checkout qa
  #           git pull origin qa                  
  
# name: Copy files to server
# on:
#     push:
#         branches:
#             - qa
#     workflow_dispatch:
# permissions:
#     contents: write
#     pages: write
#     id-token: write
# concurrency:
#     group: "pages"
#     cancel-in-progress: false
# jobs:
#     copy:
#         runs-on: ubuntu-latest
#         steps:
#             - name: Checkout qa
#               uses: actions/checkout@v4
#               with:
#                   ref: qa
#             - name: Copy files
#               run: |
#                   git config --global user.name "filmycart"
#                   git config --global user.email "filmycartin@gmail.com"
#                   git clone https://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@github.com/filmycart/nachiyartraders.git
#                   git fetch
#                   git checkout qa
#                   git pull origin qa

            # - name: Copy repo
            #     env:
            #       ACCESS_TOKEN: ${{ secrets.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 }}
            #         run: git clone "https://"$ACCESS_TOKEN"@github.com/filmycart/nachiyartraders.git"

             # Copy the repository to the directory on the server/VPS used for the application
              # - name: Copy dist to VPS
              #   uses: filmycart/nachiyartraders@qa
              #   with:
              #   #  host: ${{ secrets.SSH_HOST }}
              #     username: ${{ secrets.filmycart }}
              #   #  port: ${{ secrets.SSH_PORT }}
              #     key: ${{ secrets.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 }}
              #     # Selecting all folders except "node_modules"
              #     source: "."
              #     # The path is based on the directory where the user logged into the server starts
              #     target: "/home/kz8vi9h6efqu/public_html/qa"      

# name: push-and-deploy-to-server

# on:
#   push:
#     branches: [ qa ]

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: checkout repo
#         uses: actions/checkout@v4
#       - name: ssh and deploy
#         uses: filmycart/nachiyartraders@qa
#         with:
#           host: ${{ secrets.github.com }}
#           username: ${{ secrets.filmycart }}
#           key: ${{ secrets.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 }}
#           port: 22
#           script: |
#             git pull origin qa
#             git status

# name: Copy files to server
# on:
#     push:
#         branches:
#             - qa
#     workflow_dispatch:
# permissions:
#     contents: write
#     pages: write
#     id-token: write
# concurrency:
#     group: "pages"
#     cancel-in-progress: false
# jobs:
#     copy:
#         runs-on: ubuntu-latest
#         steps:
#             - name: Checkout qa
#               uses: actions/checkout@v4
#               with:
#                   ref: qa
#             - name: Copy files
#               run: |
#                   git config --global user.name "filmycart"
#                   git config --global user.email "filmycartin@gmail.com"
#                   git clone https://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@github.com/filmycart/nachiyartraders.git
#                   git fetch
#                   git checkout qa
#                   git pull origin qa



# This is a basic workflow to help you get started with Actions

name: digitalocean-pull-and-setup-env

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the $default-branch branch
  # push:
  #   branches: [ $default-branch ]
  # pull_request:
  #   branches: [ $default-branch ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # SSH into digitalocean droplet
      - name: executing remote ssh commands using password
        uses: filmycart/nachiyartraders@qa
        with:
          directory: /home/kz8vi9h6efqu/public_html/qa
          host: ${{ secrets.github.com }}
          username: ${{ secrets.filmycart }}
          key: ${{ secrets.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 }}
          
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

